该项目主要实现心理咨询网站
采用了spring3.1 struts1.2 hibernate3整合的方式进行开发	
20170530实现基本功能，添加用户和删除用户的管理系统，饭要一口一口吃，事情要一件一件做，首先进行struts和spring的整合，
目的是提供特定的账户密码可以进行跳转登陆

20170604今天准备实现完整的登陆和注册功能，并添加cookie表单自动填充
		实现了注册功能的一部分，添加action，进行数据库的建立
20170604今天进行了js的结合正则表达式进行验证用户名密码的合法性，并进一步完善登陆注册功能
		完善登陆功能的去数据库内查找唯一用户的功能
		(设想一个功能，当用户完成用户名输入时，当用户名窗口失焦时，将页面信息提交回服务器，
		然后进行用户名查重，这是一个非常快的过程，而且只进行用户名的查询，用户都感觉不到服务器的响应，故有良好的用户体验
		我觉得应该利用非关系型数据库进行构建账号密码专用的服务器以及数据库，以便达到快速查找简单信息）
		成功完成用户的注册与登陆功能
		在分析了以前的项目以后，发现网站直接在每个网页添加头尾页面
		以便每次跳转达到好像在一个页面进行操作，从没离开过该页面的感觉
项目分析：针对问卷功能进行分析，采取小题目分组的形式进行
		利用UML图进行构建，并正确分割题目之间的关系，还有题目和用户之间的联系
		关系数据库和非关系数据库的相似和不同之间的区分
		并进行针对不同的数据来进行选取
		因为在开发阶段，要养成敢于下手，先从简单开始，一步一步将应用进行升级，加入新功能与新技术，不断提升用户体验
20170605今天其实挺浪费时间的，原因是昨晚的作息时间不规律，早上又看了骑勇大战，抓紧时间
		项目分析：
		   	首先设计问题和小问题所需的数据库，并进行问题和用户之间的关系，先将这两个表进行完善
		   	然后在一步一步加上小问题和问题的关系，达到解耦的目的
		问题：在使用多对多的时候，要选择一方作为主要的管理者，将另一方的inverse属性设为true
		还是感觉有点问题，针对Problem和User的关系来说，怎么去规划设计答案的数据库表格
		如何存储临时数据，还有如何针对用户
		（可以采取一个临时的做法？）
20170606制作管理模块，设计权限，实现题库的分页显示，先暂时不去管有关于具体的问题
		先一步一步将数据从数据库中取出，然后再将数据分页 （于action中进行）
		然后将数据进行提交，实现完，再去考虑针对数据的长度来进行不同的方法
		部分功能分开开发，部分功能可以放在一个模块内进行，根据参数不同进行选择
		将管理员识别在登陆控制中进行，然后在系统制作完成后将管理员直接手工加入，最后将管理员进行封闭
		在页面中增加用户验证，而且不能直接把管理界面暴露,还是要判断用户权限
		(使用过滤器，过滤掉重要网页的非法访问）
		使用加密方法进行针对密码的加密，防止明文传输；
	总结   今天的开发还是挺具有效率的，趁着天气还不热，将系统早点开发好，不断捡起知识
		 把实现功能当做乐趣，而非负担，寻找代码的价值和自身的价值，多温习知识
		回去记得进行版本控制，将版本进行控制，以期不同的版本有不同的价值
		more Thinking,more Coding,let the brain powerful
20170607今天宝宝又不高兴了，没有所有事情都是顺你心意的，碰到不愉快的事就发脾气，作为小孩很正常，
		但是作为一个成年人，每个人都需要有一个底线，不是触碰到底线的事情就不要发脾气。
		成熟一点。对女生来说，不容易，但很重要
		slowdown take it easy 太不成熟 看来家庭带来的影响
		如果承受不住，接受了太多的负能量，压迫过多，对人成长是很不利的
		将几个需要相同数据且行为类似的功能防止在一个action中，
		通过dispatchAction进行处理，以期达到最好的效果
20170608将用户的验证进行完善，并针对注册进行把控,实现了用户查重的功能
		将用户通过分页的方式进行分页，并传递给下一页面
		在使用jstl标签的时候需要注意是否使用了JSP的java片段代码，现在看来可能出现冲突，在旧版ie上
		在了解了注册的机制之后，可以根据	
项目分析	碰到了针对分页和用户信息提交的冲突问题，一个是使用action进行提交，
		另一个则采用了网址参数的形式进行提交，
		这两者理论上是不会冲突的，但是碰到这样的问题，就要有针对性地去解决
		先提出两个解决方案，1，将分页信息通过struts的actionform进行提交，利用struts进行统一管理，
					   2，将用户信息通过明文直接传递
		理论上优先选择第一个，麻烦一点，但是足够安全，对服务器压力会变大？
		在实际开发过程中，使用了通过表单进行提交的话，会造成表单取得的页面信息如果为空，
		就产生错误，因为刚开始没有给页面信息所以，还需要在技术上再做查找进行突破
20170610如果使用表单提交pagenow的话，可以考虑利用struts标签进行接收，以期到时候可以防止出现控制的情况
		理清一下思路，先进行关于分页的参数放入form的操作
		或者利用表单和超链接的方式，将分页参数和用户信息分别进行传输,因为同时出现了页面数据和用户数据
		所以，要考虑同时传递的问题，即在提交用户数据的同时，要考虑页面数据的传输
		成功完成了用户信息和分页信息的提交，利用隐藏表单传值和地址传值两个功能的结合来实现，
		将分页信息在不同的页面中分别利用隐藏表单和地址的方式传递，并利用地址优先的方式保证数据的统一
		现在要开发的是有关于上一页和下一页的问题，遇到了有关于值与值如何利用标签进行判断的问题
		利用struts标签中的logic标签进行判断
		使用过滤器来针对用户的权限进行校验，将servletrequest转为httpservletrequest进行操作
项目分析     接下来完善管理员相关部分，针对问题进行添加删除，修改，并分页提交，
		然后根据用户的不同进行问题答案的分析与存储，要注意充分地去复用代码，不要写无效的代码，
		重复造轮子，不是一件光荣而有意义的事
		到底该去怎么设计？有关于manager和Problem之间，将二者解耦，
		将具有更改problem的manager隐藏后台
		然后将Problem单独提出，只使用分页技术访问数据库提出数据，并交予前段渲染
		然后准备后面利用这一块来进行，使用question来进行有关个别答案的传递和梳理（大工程，挑战）
20170611像原来一样，使用managerAction，ProblemAction分别进行针对管理员的操作和针对问题进行的操作
		（可以将jsp也进行分层，利用文件夹区分不同块，藉此来对）
		可以使相同的功能进行复用
		然后考虑未来针对该功能的使用，对其进行设计（高并发？高安全性？大容量？）
		将修改问题功能分为两块
			一个是分页显示问题，显示使用其的用户数（未来可能加入其他参数）
			二是针对单独问题的修改,通过pId，暂时设计为修改其题目（未来可能加入其他参数）
		因为在分页显示页面已经出现了数据，是否要在修改页面直接给予权限进行修改，然后一步提交，是否这样会更好?
		首先如果在当前页面提交，优势是很明显的了，因为不需要进行跳转，从而可以节省页面和action开销
		但是如果不在页面提交，会有什么好处？一种仪式感，可以给人再确认的时机
		先解决删除的问题，使用form进行传输，problem的属性值个数是固定的，其实可以写死，有参数就给参数
20170612大体上完成了有关于问题管理和用户管理的模块的设计和开发，
		下一步就该进行有关管理员用户权限的控制问题
		使用过滤器进行用户权限的过滤，凡是危险页面，都要进行过滤，服务器扫描器，扫描端口，扫描页面。。。
项目分析     接下来应该进行具体的Question的开发了，进行分析，设计，最后实现	
题外话 	像虎扑服务器这种，在短暂时间达到了高并发的情形，应该提前针对服务器进行升级，进行峰值测试
		在出现服务器响应缓慢时，暂时延缓其他业务，先将性能空间腾出，给予最重要的业务，直播
		实际在碰到这种高并发情形的同时首先要针对并发的强度有一个正确的估计，然后就是有正确的应对方式
20170613完成了有关Problem和Question的设计，接下来就是要根据具体的页面进行开发，
		要重新针对不同的数据库进行页面的设计？其实不用，对新的question，可以直接添加，
		后在之中增加跟Problem的联系即可，然后再根据问题的不同，对Problem进行显示然后点进去就进行
		测试，首先跳转到第一个小问题，后再根据小问题答案的不同，进行跳转，不过要做好每一步的校验工作
		完成了关于分页显示Problem,	下一步进行添加Question并进行与Problem进行联系的环节
		先进行了有关于Question的添加问题，然后再进行有关于Question相关Action的具体显示和提交问题
		如果说是在添加完Problem之后再进行添加比较简单，但是如果是同时添加该怎么去传输这个数据呢
		怎么去设计两个的顺序，还有两个该怎么进行，刚才好像已经有一点头绪了
		先完成添加然后在跳回的同时把qId传回来，并显示在Problem上，这样可以
		有必要再考虑一下，是使用一对多在这里是必要的吗？针对每一个Problem，是不是Question有这么高的复用率呢？
		大概很多时候，没有，就没必要针对Question进行单独的创建，是吗？
		在映射到表内的时候，也同样要做成子表映射
20170615考虑在页面内利用集合进行打包，然后直接根据pID传输，进行持久化
		根据技术和逻辑的考虑，那样是不靠谱的，还是决定使用跳转根据index进行添加
		在设置了cascade级联之后，就可以单方进行添加了